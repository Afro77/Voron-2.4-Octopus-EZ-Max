[include fluidd.cfg]

# VORON2.4 350mm config

# This is a base printer.cfg file for the VORON2 printer and matches the manual/build guide exactly
# for controllers used (Octopus Max Ez) and pin layout for all connected components.
# Created by "Ponty" with help from the VORON community.

# For other build sizes, controllers, or non-standard pin connections, please see
# https://github.com/mzbotreprap/VORON/tree/master/Firmware/Klipper/Voron_2.1/Klipper/Configurations
# for other example Klipper configs created by the VORON community.

# This file is only an example - be sure to review and update it
# according to the specifics of your printer.

# See docs/Config_Reference.md for a description of parameters.

# *** THINGS TO CHANGE/CHECK: ***
# Arduino paths                         [mcu] section
# Thermistor types                      [extruder] and [heater_bed] sections - See 'sensor types' list at end of file
# FSR switch (z endstop) location       [homing_override] section
# FSR switch (z endstop) offset for Z0  [stepper_z] section
# Probe points                          [quad_gantry_level] section
# Min & Max gantry corner postions      [quad_gantry_level] section
# PID tune                              [extruder] and [heater_bed] sections
# Fine tune E steps                     [extruder] section

[mcu]
# Mcu for X/Y/Z steppers
canbus_uuid: 482b247d4b1a
#serial: /dev/serial/by-id/usb-Klipper_stm32h723xx_0C0010000751313339373836-if00    Obtain definition by "ls -l /dev/serial/by-id/"
#restart_method: command

[mcu can0]

canbus_uuid: 44460956cdcd
#restart_method: command

[virtual_sdcard]
path: /home/klipper/printer_data/gcodes

[adxl345]
cs_pin: can0: gpio1
spi_software_sclk_pin: can0: gpio2
spi_software_mosi_pin: can0: gpio0
spi_software_miso_pin: can0: gpio3
axes_map: x,y,z

[resonance_tester]
accel_chip: adxl345
probe_points:
    175,175,20  # an example



[printer]
kinematics: corexy
max_velocity: 600
max_accel: 6000
max_z_velocity: 300
max_z_accel: 600

## X Stepper - B Stepper
##  Connected to MOTOR_1
##  Endstop connected to DIAG_1

[stepper_x]
step_pin: PC13
dir_pin: !PC14
enable_pin: !PE6
microsteps: 16
rotation_distance: 40
endstop_pin: tmc5160_stepper_x:virtual_endstop

position_min: 0
position_endstop: 350
position_max: 350

homing_speed: 110
homing_retract_dist: 5

[tmc5160 stepper_x]
cs_pin: PG14
spi_speed: 400000
spi_software_sclk_pin: PE12
spi_software_mosi_pin: PE14
spi_software_miso_pin: PE13

sense_resistor: 0.075   #0.075
interpolate: False
run_current: 2.0
#hold_current: 0.600
stealthchop_threshold: 0

diag1_pin: ^!PF0
driver_SGT: 2     #-64-0-64

## Y Stepper - A Stepper
##  Connected to MOTOR_2
##  Endstop connected to DIAG_1

[stepper_y]
step_pin: PE4
dir_pin: !PE5
enable_pin: !PE3
microsteps: 16
rotation_distance: 40
endstop_pin:tmc5160_stepper_y:virtual_endstop

position_min: 0
position_endstop: 350
position_max: 350

homing_speed: 110
homing_retract_dist: 5

[tmc5160 stepper_y]
cs_pin: PG13
spi_speed: 400000
spi_software_sclk_pin: PE12
spi_software_mosi_pin: PE14
spi_software_miso_pin: PE13

sense_resistor: 0.075
interpolate: False
run_current: 2.0
#hold_current: 0.600
stealthchop_threshold: 0

diag1_pin: ^!PF2
driver_SGT: 2    #-64-0-64

#####################################################################
#   Z Stepper Settings
#####################################################################

## Z0 Stepper - Front Left
##  Connected to MOTOR_3
##  Endstop connected to SBB Tap

[stepper_z]
step_pin: PE1
dir_pin: !PE0
enable_pin: !PE2
rotation_distance: 40
gear_ratio: 80:16
microsteps: 32
#position_endstop: 0
endstop_pin: probe:z_virtual_endstop

position_max: 350
position_min: -2
#   Set to -2 to allow room for squaring gantry with quad_gantry_level
homing_speed: 50
second_homing_speed: 15
homing_retract_dist: 5

[tmc5160 stepper_z]
cs_pin: PG12
spi_speed: 400000
spi_software_sclk_pin: PE12
spi_software_mosi_pin: PE14
spi_software_miso_pin: PE13

sense_resistor: 0.075
interpolate: False
run_current: 2.0
hold_current: 1.0
stealthchop_threshold: 0

#  Z1 Stepper - Rear Left
##  Connected to MOTOR_4
[stepper_z1]
step_pin: PB8
dir_pin: PB9
enable_pin: !PB7
rotation_distance: 40
gear_ratio: 80:16
microsteps: 32

[tmc5160 stepper_z1]
cs_pin: PG11
spi_speed: 400000
spi_software_sclk_pin: PE12
spi_software_mosi_pin: PE14
spi_software_miso_pin: PE13

sense_resistor: 0.075
interpolate: False
run_current: 2.0
hold_current: 1.0
stealthchop_threshold: 0

[stepper_z2]
##  Z2 Stepper - Rear Right
##  Connected to MOTOR_4
step_pin: PB5
dir_pin: !PB4
enable_pin: !PB6
rotation_distance: 40
gear_ratio: 80:16
microsteps: 32

[tmc5160 stepper_z2]
cs_pin: PG10
spi_speed: 400000
spi_software_sclk_pin: PE12
spi_software_mosi_pin: PE14
spi_software_miso_pin: PE13

sense_resistor: 0.075
interpolate: False
run_current: 2.0
hold_current: 1.0
stealthchop_threshold: 0

[stepper_z3]
##  Z3 Stepper - Front Right
##  Connected to MOTOR_6
step_pin: PG15
dir_pin: PB3
enable_pin: !PD5
rotation_distance: 40
gear_ratio: 80:16
microsteps: 32

[tmc5160 stepper_z3]
cs_pin: PG9
spi_speed: 400000
spi_software_sclk_pin: PE12
spi_software_mosi_pin: PE14
spi_software_miso_pin: PE13

sense_resistor: 0.075
interpolate: False
run_current: 2.0
hold_current: 1.0
stealthchop_threshold: 0

#####################################################################
#   Extruder
#####################################################################

##	In E0-MOT Position
[extruder]

step_pin: can0: gpio18
dir_pin: can0: gpio19
enable_pin: !can0: gpio17
##	Update value below when you perform extruder calibration
##	If you ask for 100mm of filament, but in reality it is 98mm:
##	rotation_distance = <previous_rotation_distance> * <actual_extrude_distance> / 100
##  34.37086 for Bondtech 8mm gears (Galileo)
rotation_distance: 48.05266031768008      #20.30534687903944        # Galileo 2
##	Update Gear Ratio depending on your Extruder Type
##  Use 7.5:1 for Galileo
gear_ratio: 9:1     # Galileo 2
microsteps: 16
full_steps_per_rotation: 200	#200 for 1.8 degree, 400 for 0.9 degree
nozzle_diameter: 0.400
filament_diameter: 1.75

heater_pin: can0: gpio7
##	Validate the following thermistor type to make sure it is correct
sensor_type: PT1000 #MAX31865        # Generic 3950
sensor_pin: can0: gpio27
min_temp: 0
max_temp: 450
max_power: 1.0
min_extrude_temp: 170
control = pid
pid_kp = 26.213
pid_ki = 1.304
pid_kd = 131.721
##	Try to keep pressure_advance below 1.0
pressure_advance: 0.028  #as tested by Harry 0.030 was good
##	Default is 0.040, leave stock
#pressure_advance_smooth_time: 0.040

##	Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 extruder]

uart_pin: can0: gpio20
interpolate: false
run_current: 0.9
hold_current: 0.40
sense_resistor: 0.110
stealthchop_threshold: 0


#####################################################################
#   Bed Heater
#####################################################################

##  SSR Pin - Bed Out
##  Thermistor - TB
[heater_bed]
##  Other wiring guides may use BED_OUT to control the SSR. Uncomment the following line for those cases
heater_pin: PF5
## Check what thermistor type you have. See https://www.klipper3d.org/Config_Reference.html#common-thermistors for common thermistor types.
## Use "Generic 3950" for Keenovo heaters
sensor_type:Generic 3950
sensor_pin: PB1
##  Adjust max_power so it doesn't exceed the SSR rating. The Omron G3NA-210B-DC5 SSR is rated at 4 amps without a heatsink.
##  The formula is "4 / (Wattage_of_bed_heater / Mains_voltage) = max_power"
##  If max_power is greater than 1.0, use 1.0
max_power: 1.0
min_temp: 0
max_temp: 200
control: pid
pid_kp: 58.437
pid_ki: 2.347
pid_kd: 363.769

#####################################################################
#	Probe
#####################################################################

[probe]
##	This probe is not used for Z height, only Quad Gantry Leveling
##	In Z+ position
##	If your probe is NO instead of NC, change pin to ^!can0
pin: ^!can0: gpio22
x_offset: 0
y_offset: 0
#z_offset: 0
speed: 10.0
lift_speed: 10  #remove when using induction
samples: 3
samples_result: median
sample_retract_dist: 3.0
samples_tolerance: 0.106        #0.006
samples_tolerance_retries: 3
activate_gcode:
    {% set PROBE_TEMP = 180 %}
    {% set MAX_TEMP = PROBE_TEMP + 5 %}
    {% set ACTUAL_TEMP = printer.extruder.temperature %}
    {% set TARGET_TEMP = printer.extruder.target %}

    {% if TARGET_TEMP > PROBE_TEMP %}
        { action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }
        M109 S{ PROBE_TEMP }
    {% else %}
        # Temperature target is already low enough, but nozzle may still be too hot.
        {% if ACTUAL_TEMP > MAX_TEMP %}
            { action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }
            TEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }
        {% endif %}
    {% endif %}

#####################################################################
#	Filament sensor
#####################################################################

#[filament_switch_sensor switch_sensor]
#switch_pin: EBBCan:PB4

#[filament_motion_sensor motion_sensor]
#switch_pin: ^EBBCan:PB3

[filament_motion_sensor encoder_sensor]
detection_length: 7
#   The minimum length of filament pulled through the sensor to trigger
#   a state change on the switch_pin
#   Default is 7 mm.
extruder: extruder
#   The name of the extruder section this sensor is associated with.
#   This parameter must be provided.
switch_pin: !PC0
# changing the switch_pin name according to your motherboard
pause_on_runout: True
#runout_gcode:
#insert_gcode:
#event_delay:
#pause_delay:


#####################################################################
#	Fan Control
#####################################################################

[heater_fan hotend_fan]
##	Hotend Fan - FAN0 Connector
pin: can0: gpio14
max_power: 1.0
#kick_start_time: 0.5
heater: extruder
heater_temp: 50.0
##	If you are experiencing back flow, you can reduce fan_speed
#fan_speed: 1.0

[fan]
##	Print Cooling Fan - FAN1 Connector
pin: can0: gpio13
max_power: 1.0
kick_start_time: 1.0
##	Depending on your fan, you may need to increase this value
##	if your fan will not start. Can change cycle_time (increase)
##	if your fan is not able to slow down effectively
off_below: 0.10

[fan_generic electronics]
##	CElectronics fan - FAN2 Connector
pin: PA1
pin: PF8
max_power: 0.90
shutdown_speed: 0.0
off_below: 0.10
kick_start_time: 0.5
#stepper: stepper_x, stepper_y, stepper_z

## [heater_fan exhaust_fan]
[fan_generic exhaust_fan]
##  Exhaust fan
pin: PA6
max_power: 1.0

[temperature_fan chamber]
pin: PA2
max_power: 1.0
shutdown_speed: 0.0
kick_start_time: 5.0
cycle_time:0.01
off_below:0.1
#heater_pin: PF6
sensor_type: Generic 3950       #NTC 100K beta 3950
sensor_pin: PC5
min_temp: -100
max_temp: 180
target_temp: 20.0
control: watermark
gcode_id: C

#####################################################################
#   Thermals
#####################################################################

[temperature_sensor raspberry_pi]
## Pi Temps
sensor_type: temperature_host
max_temp: 100

##[temperature_sensor mcu_temp]
[temperature_sensor Octopus]
## Octopus Temps
sensor_type: temperature_mcu
max_temp: 90

[temperature_sensor SB2209]
sensor_type: temperature_mcu
sensor_mcu: can0
min_temp: 0
max_temp: 90

[temperature_sensor bed_top]
## Top of Bed Temps
sensor_type: Generic 3950
sensor_pin: PC2

#[temperature_sensor chamber]
#sensor_type: Generic 3950           #NTC 100K beta 3950
#sensor_pin: PC5
#min_temp: 0
#max_temp: 180
#gcode_id: C

#####################################################################
#	LED Control
#####################################################################

[output_pin caselight ]
##  Chamber Lighting
pin: PA3
pwm: true
shutdown_value: 0
cycle_time: 0.01

[neopixel hotend_rgb]
pin: can0: gpio16
chain_count: 3
color_order: GRBW

initial_RED: 1.0
initial_GREEN: 0.0
initial_BLUE: 1.0
initial_WHITE: 0.0


#####################################################################
#	Homing and Gantry Adjustment Routines
#####################################################################

[idle_timeout]
timeout: 7200  #1800

[safe_z_home]
##	XY Location of the Z Endstop Switch
##	Update -10,-10 to the XY coordinates of your endstop pin
##	(such as 157,305) after going through Z Endstop Pin
##	Location Definition step.
#home_xy_position:221,350
home_xy_position:175,175
speed:100
z_hop:10

[bed_mesh]
speed: 200
horizontal_move_z: 10
mesh_min: 40, 40
mesh_max: 310,310
probe_count: 5,5
fade_start: 0.6
fade_end: 10.0
algorithm: bicubic
#relative_reference_index: 14

[quad_gantry_level]
##	Use QUAD_GANTRY_LEVEL to level a gantry.
#--------------------------------------------------------------------
##	Gantry Corners for 350mm Build

gantry_corners:
   -60,-10
   410,420
#  Probe points
points:
   25,25
   25,325
   325,325
   325,25

speed: 100
horizontal_move_z: 15
retries: 5
retry_tolerance: 0.107      #0.007
max_adjust: 10

#####################################################################
#   Macros
#####################################################################

[gcode_macro M141]          #Heated chamber control
gcode:
    {% set s = params.S|default(0)|float %}
    SET_TEMPERATURE_FAN_TARGET temperature_fan="chamber" target={s}

[gcode_macro PARK]
gcode:
    {% set th = printer.toolhead %}
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y//2} Z30

[gcode_macro G32]
gcode:
    SAVE_GCODE_STATE NAME=STATE_G32
    G90
    G28
    QUAD_GANTRY_LEVEL
    G28
    PARK
    RESTORE_GCODE_STATE NAME=STATE_G32

[gcode_macro _HOME_X]
gcode:
    # Always use consistent run_current on A/B steppers during sensorless homing
    {% set RUN_CURRENT_X = printer.configfile.settings['tmc5160 stepper_x'].run_current|float %}
    {% set RUN_CURRENT_Y = printer.configfile.settings['tmc5160 stepper_y'].run_current|float %}
    {% set HOME_CURRENT = 0.7 %}
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}

    # Home
    G28 X
    # Move away
    G91
    G1 X-10 F1200

    # Wait just a second… (give StallGuard registers time to clear)
    G4 P1000
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}


[gcode_macro _HOME_Y]
gcode:
    # Set current for sensorless homing
    {% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}
    {% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}
    {% set HOME_CURRENT = 0.7 %}
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}

    # Home
    G28 Y
    # Move away
    G91
    G1 Y-10 F1200

    # Wait just a second… (give StallGuard registers time to clear)
    G4 P1000
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}

[gcode_macro PRINT_START]
#   Use PRINT_START for the slicer starting script - please customise for your slicer of choice
gcode:
    G32                            ; home all axes
    G90                            ; absolute positioning
    G1 Z20 F3000                   ; move nozzle away from bed


[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}

    SAVE_GCODE_STATE NAME=STATE_PRINT_END

    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-5.0 F1800                 ; retract filament

    TURN_OFF_HEATERS

    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600  ; park nozzle at rear
    M107                                     ; turn off fan

    BED_MESH_CLEAR

    # The purpose of the SAVE_GCODE_STATE/RESTORE_GCODE_STATE
    # command pair is to restore the printer's coordinate system
    # and speed settings since the commands above change them.
    # However, to prevent any accidental, unintentional toolhead
    # moves when restoring the state, explicitly set MOVE=0.
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0


[gcode_macro UNLOAD_FILAMENT]
gcode:
    M83
    G1 E10 F300
    G1 E-780 F1800
    M82

[gcode_macro LOAD_FILAMENT]
gcode:
    M83
    G1 E750 F1800
    G1 E30 F300
    G1 E15 F150
    M82

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [bed_mesh default]
#*# version = 1
#*# points =
#*# 	-0.327500, -0.280000, -0.210000, -0.217500, -0.212500
#*# 	-0.305000, -0.218750, -0.163750, -0.133750, -0.086250
#*# 	-0.276250, -0.162500, -0.081250, -0.011250, 0.057500
#*# 	-0.238750, -0.098750, 0.020000, 0.107500, 0.192500
#*# 	-0.135000, -0.000000, 0.150000, 0.255000, 0.350000
#*# x_count = 5
#*# y_count = 5
#*# mesh_x_pps = 2
#*# mesh_y_pps = 2
#*# algo = bicubic
#*# tension = 0.2
#*# min_x = 40.0
#*# max_x = 310.0
#*# min_y = 40.0
#*# max_y = 310.0
#*#
#*# [probe]
#*# z_offset = -0.655
